{
  "name": "feature",
  "description": "Granular Feature Detection for Browsers",
  "tags": [
    "feature detection",
    "browser"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "version": "0.1.3",
  "devDependencies": {
    "tape": "~1.1.0",
    "crel": "~1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/DamonOehlman/feature.git"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/feature/issues"
  },
  "scripts": {
    "gendocs": "gendocs > README.md",
    "lint": "jshint *.js && jshint element/*.js"
  },
  "testling": {
    "files": "test/all.js",
    "browsers": [
      "ie/9",
      "ie/10",
      "chrome/latest",
      "firefox/latest",
      "safari/latest",
      "opera/latest"
    ]
  },
  "contributors": [],
  "readme": "# feature\n\nFeature-detection at a highly targeted level.\n\n\n[![NPM](https://nodei.co/npm/feature.png)](https://nodei.co/npm/feature/)\n\n\n[![browser support](https://ci.testling.com/DamonOehlman/feature.png)](https://ci.testling.com/DamonOehlman/feature)\n\n\n## What about Modernizr?\n\n[Modernizr](https://github.com/Modernizr) is wonderful, no doubt about it.\nIt is however, pretty massive and while it can be whittled down to a smaller\nsize using customization from the download page, I'm just a bit too lazy \nfor that.  I would prefer\nto specify the feature detection I need in code using require statements\n(e.g. `require('feature/fullscreen')`) and have only the code required to\ndetect that feature included.\n\nThat's why.  It's purely selfish, and well you should feel free to keep\non using Modernizr. I'm not going to judge you.\n\n## Example Usage\n\nDo we have CSS transforms available?\n\n```js\nvar transform = require('feature/css')('transform');\n\n// check if transforms are available\nif (transform) {\n    // if they are you can use the transform return value\n    // (which is in fact a function)\n    // to get the value and modify the transform value\n    transform(testElement, 'scale(2.0, 2.0)');\n}\n```\n\nBecause of Browserify's excellent static analysis (powered by\n[esprima](https://github.com/ariya/esprima)), when `feature` is \nused within an application in this way, only the targeted feature \ndetection is included in the resultant JS file.\n\n## css(prop)\n\nTest for the prescence of the specified CSS property (in all it's \npossible browser prefixed variants)\n\n## detect\n\nThe core functionality of the feature module is powered by the `detect`\nfunction, which can be imported like so:\n\n```js\nvar detect = require('feature/detect');\n```\n\nOnce you have the detect function available you can do nifty things like\ndetect whether your browser supports `requestAnimationFrame`:\n\n```js\nvar raf = detect('requestAnimationFrame');\n```\n\nIf it does then `raf` will be a function that is equivalent to the browser\nprefixed requestAnimationFrame function (e.g. webkitRequestAnimationFrame).\nIt should be noted that feature does nothing to try and polyfill things that\ndon't exist, that is left to you to implement yourself.\n\n## fullscreen\n\nIf the [Fullscreen API](http://caniuse.com/#feat=fullscreen) is available\nthis will allow you to fullscreen either the document or a target element.\n\n```js\nvar fullscreen = require('feature/fullscreen');\n\nif (fullscreen) {\n  fullscreen(); // you can pass an element to fullscreen here\n}\n```\n\nAdditionally, the function can be passed directly to an event handler and \nthe function will adjust :)\n\n```js\nvar fullscreen = require('feature/fullscreen');\n\ndocument.getElementById('makeMeFS').addEventListener('click', fullscreen);\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/DamonOehlman/feature",
  "_id": "feature@0.1.3",
  "dist": {
    "shasum": "15171a478c32edb759f4f34b37e8e09c86561db8"
  },
  "_from": "feature@",
  "_resolved": "https://registry.npmjs.org/feature/-/feature-0.1.3.tgz"
}
